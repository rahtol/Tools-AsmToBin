/**
 * JavaCC file for Intel Assembler syntax.
 */options{  JDK_VERSION = "1.5";
  LOOKAHEAD = 1;
  STATIC = false;}PARSER_BEGIN(ASMPARSER)
import java.io.File;
import java.io.FileReader;
import java.util.HashMap;
import java.io.FileOutputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public class ASMPARSER{

  final static String version = "AsmToBin v1.01, 21.12.2014";

  /*
  * symbol table containg all defined labels
  */
  static HashMap<String,Integer> symtab = new HashMap<String,Integer>();
  static FileOutputStream outf;
  
  public int pass;
  public String segmentname;
  public int offset;
    public static void main(String args []) throws ParseException  {    System.out.println(version);
    
    if (args.length < 2) {
        System.err.println ("usage: AsmToBin <Existing-ASM-InputFile> <Name-of-Generated-Binary-Outputfile>\n");
        System.exit(-1);
    };

    File infile = new File (args[0]);
    File outfile = new File (args [1]);
    System.out.println("Reading from: \"" + args[0] + "\"");
    System.out.println("Writing to: \"" + args [1] + "\"");

    try    {      ASMPARSER pass1 = new ASMPARSER(new FileReader(infile));
      pass1.pass = 1;
      System.out.println("Pass1.");
      pass1.asm_compilation_unit();
      System.out.println("Pass1 OK.");

      ASMPARSER pass2 = new ASMPARSER(new FileReader(infile));
      pass2.pass = 2;
      System.out.println("Pass2.");
      outf= new FileOutputStream (outfile);
      pass2.asm_compilation_unit();
      outf.close();
      System.out.println("Pass2 OK.");

    } catch (FileNotFoundException e) {
        System.err.println(e.getMessage());
        e.printStackTrace();
    } catch (IOException e) {
        System.err.println(e.getMessage());
        e.printStackTrace();
    } catch (Exception e) {        System.out.println("NOK. Exception.");        System.out.println(e.getMessage());        e.printStackTrace();
    }    catch (Error e) {        System.out.println("Oops. Error.");        System.out.println(e.getMessage());        e.printStackTrace();
    }  }

  void wr (int val, int len)
  {
    try    {      while (len > 0)      {
        outf.write (val % 256); // write lsb
        val = val / 256;
        len--;      }
    }
    catch (IOException e)    {        System.out.println(e.getMessage());
        e.printStackTrace();
        System.exit (-1);
    }
  }
  
}PARSER_END(ASMPARSER)SKIP :{  " "| "\r"| "\t"| "\n"|  < ";" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
}TOKEN [IGNORE_CASE]: /* KEYWORDS */
{
  < NAME : "NAME" > 
| < SEGMENT : "SEGMENT" >
| < BYTE : "BYTE" >
| < USE32 : "USE32" >
| < RO : "RO" >
| < ALIGN : "ALIGN" >
| < ENDS : "ENDS" >
| < END : "END" >
| < DB : "DB" >
| < DW : "DW" >
| < DD : "DD" >
}

TOKEN : /* OPERATORS */{  < PLUS : "+" >| < MINUS : "-" >| < MULTIPLY : "*" >| < DIVIDE : "/" >}TOKEN :{  < CONSTANT : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >
| < IDENTIFIER : <LETTER> (<LETTER> | <DIGIT>)* >|  <#LETTER: ["$","A"-"Z","_","a"-"z"]>
}int asm_compilation_unit() :{}{
  name ()  (    segment()
  )+
  < END >
  < EOF >  {    return 0;  }}
void name() :
{}
{    < NAME > < IDENTIFIER >
}
void segment() :
{}
{
    segment_header_statement()
    (
      < ALIGN > < CONSTANT >
    )?
    (      LOOKAHEAD(2)
      data_statement()
    )+
    segment_ends_statement()
}

void segment_header_statement() :{}{    < IDENTIFIER >
    {
      segmentname = token.image;      offset = 0;
      System.out.println ("Start of Segment \"" + segmentname + "\"");
    }
    < SEGMENT > (segment_attribute())* 
}
void segment_ends_statement() :
{
  Token segname;
}
{
    segname = < IDENTIFIER >
    < ENDS >
    {
      if (!segname.image.equals(segmentname))
      {
        System.out.println ("Segment name mismatch: \"" + segname.image + "\"");
      }
      System.out.println("Segment \"" + segmentname + "\" Closed, len=" + offset);
    }
}
void segment_attribute() :
{}
{
    < BYTE >
  | < USE32 >
  | < RO >
}

void data_statement() :
{
  int ddlen;
  int val;
}
{
    (      label()
    )?
    (      < DB >      {         ddlen = 1;
      }
    | < DW >
      {
         ddlen = 2;
      }
    | < DD >
      {
         ddlen = 4;
      }
    )
    val = expr()
    {      offset += ddlen;
      if (pass ==2)
      {
        // write val with ddlen bytes into outf
        //System.out.println("val="+val+", ddlen="+ddlen);
        wr (val, ddlen);
      }
    }
}

void label() :
{
  String label;
}
{
    < IDENTIFIER >    {      label = token.image;
    }
    ":"
    {
      if (pass ==1)      {        System.out.println("Define label \"" + label + "\" at offset " + offset);
        symtab.put (label, offset);
      }
    }
}

int expr() :
{
  int a;
  int b;
  int val;
}
{  a = term()
  {    val = a;
  }
  (
    (
      < PLUS >      b = term()
      {        val += b;
      }
    | < MINUS >      b = term()
      {        val -= b;
      }
    )
  )*
  {    return val;
  }
}

int term() :{
  int a;
  int b;
  int val;
}{  a = unary()  {
    val = a;
  }
  (    (      < MULTIPLY >      b = unary()
      {
        val = val * b;
      }
    | < DIVIDE >      b = unary()
      {
        val = val / b;
      }
    )  )*  {
    return val;
  }
}int unary() :{
  int a;
  int val;
}{  < MINUS >
  a = element()
  {    return val = -a;
  }| val = element()  {
    return val;
  }
}int element() :{
  int val;
  Token t;
}{  t = < CONSTANT >
  {    val = Integer.parseInt(t.image);
    return val;
  }
| t = < IDENTIFIER >
  {
    if (pass == 2)    {      Integer value = symtab.get (t.image);
      // TODO: check value for not being null
      return val = value;
    }
    else    {      return 1;
    }
  }| "(" val = expr() ")"
  {    return val;
  }}
